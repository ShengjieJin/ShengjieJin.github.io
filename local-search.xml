<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>腾讯云OCR使用教程</title>
    <link href="/2023/02/28/%E8%85%BE%E8%AE%AF%E4%BA%91OCR%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2023/02/28/%E8%85%BE%E8%AE%AF%E4%BA%91OCR%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="腾讯云OCR-API使用教程"><a href="#腾讯云OCR-API使用教程" class="headerlink" title="腾讯云OCR API使用教程"></a>腾讯云OCR API使用教程</h1><p>本教程介绍腾讯云OCR API的使用方法，包括Java、.NET、C++、Node.js、Python、GO六种编程语言的调用方式，从环境配置到案例实现，每种语言都配备了示例代码和可直接运行的Demo以方便使用。</p><p><em>您可以从以下仓库中下载示例代码：<a href="https://github.com/ShengjieJin/tencentcloudOCRDemo">https://github.com/ShengjieJin/tencentcloudOCRDemo</a></em></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在开始使用腾讯云OCR API之前，您需要先进行以下准备工作：</p><ol><li><p><strong>开通文字识别服务：</strong>进入 <a href="https://console.cloud.tencent.com/ocr/v2/overview">文字识别控制台</a>，注册腾讯云账号并通过实名认证，阅读《文字识别服务条款》后勾选同意并单击立即开通；</p><p><img src="/2023/02/28/%E8%85%BE%E8%AE%AF%E4%BA%91OCR%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/929bf9094ce2012473bcc4233a383e01.png" alt="img"></p></li><li><p><strong>获取个人密钥：</strong>单击 <a href="https://console.cloud.tencent.com/cam/capi">查看密钥</a>，进入控制台的 API 密钥管理界面，可查看您的<strong>个人密钥</strong>，若是新用户可单击【新建密钥】按钮创建<strong>个人密钥</strong>。<br><img src="/2023/02/28/%E8%85%BE%E8%AE%AF%E4%BA%91OCR%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/5e0fc4f58f309c78a987417dc1f193ec.png" alt="img"></p></li><li><p><strong>开发环境准备：</strong>下载安装各自编程语言的开发环境，如Java、.NET、C++、Node.js、Python、GO等，六种选其一。</p></li><li><p><strong>了解输出格式：</strong>您可以参考<a href="https://console.cloud.tencent.com/api/explorer?Product=ocr&Version=2018-11-19&Action=RecognizeTableOCR">腾讯云 API Explorer</a></p><p><img src="/2023/02/28/%E8%85%BE%E8%AE%AF%E4%BA%91OCR%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230225112645097.png" alt="image-20230225112645097"></p></li></ol><h2 id="Java调用OCR-API"><a href="#Java调用OCR-API" class="headerlink" title="Java调用OCR API"></a>Java调用OCR API</h2><h3 id="步骤1：环境配置"><a href="#步骤1：环境配置" class="headerlink" title="步骤1：环境配置"></a>步骤1：环境配置</h3><ol><li><p>JDK 7版本及以上。</p></li><li><p>安装SDK（以下<strong>二选一</strong>）：</p><ul><li><p><strong>方法一：</strong>通过Maven安装（推荐）：</p><p><strong>对Maven不熟悉的同学可以通过<a href="https://www.bilibili.com/video/BV1Ah411S7ZE/?vd_source=8b5c81fdce0a83b276ff598313988dc1">黑马程序员Maven教程</a>1至11集学习，1小时左右就能上手</strong></p><ul><li><p>访问Maven官网（<a href="https://maven.apache.org/%EF%BC%89%E4%B8%8B%E8%BD%BD%E9%80%82%E5%90%88%E6%82%A8%E7%B3%BB%E7%BB%9F%E7%9A%84Maven%E5%AE%89%E8%A3%85%E5%8C%85%E5%B9%B6%E8%BF%9B%E8%A1%8C%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%EF%BC%9B">https://maven.apache.org/）下载适合您系统的Maven安装包并进行安装并配置环境变量；</a></p><p><img src="https://www.runoob.com/wp-content/uploads/2018/09/750D721E-0624-4C16-AD4B-9EA5D7F6289A.png" alt="img"></p></li><li><p>在项目文件夹下创建<code>pom.xml</code>文件作为Maven 项目的配置文件（可通过IDEA模板直接创建，也可以直接使用<code>\Demo\1 Java Demo</code>中提供的）向<code>dependencies</code> 标签添加依赖项：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.tencentcloudapi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tencentcloud-sdk-java-ocr<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.701<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>除此之外，还需要配置一些插件，以实现maven编译和打包依赖等操作。 <code>groupId</code>、<code>artifactId</code>、<code>version</code>、<code>name</code>、<code>url</code> 字段可以按照你的项目进行修改，适用于本项目的完整pom.xml文件示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>OCR<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>OCR<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://www.example.com<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.tencentcloudapi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tencentcloud-sdk-java-ocr<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.701<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-clean-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.22.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-install-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-site-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.7.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">addClasspath</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addClasspath</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>org.example.RecognizeTableOCR<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>org.example.RecognizeTableOCR<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRefs</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRef</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRefs</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>single<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>设置镜像源以加快下载速度，编辑 maven 的 settings.xml 配置文件（<code>&lt;maven安装路径&gt;\apache-maven-3.x.x\conf</code>），在 mirrors 段落增加镜像配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>tencent<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>tencent maven mirror<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://mirrors.tencent.com/nexus/repository/maven-public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>方法二：</strong>通过源码包安装：</p><ul><li>前往 <a href="https://github.com/tencentcloud/tencentcloud-sdk-java">Github 代码托管地址</a> 下载源码压缩包；</li><li>解压源码包到您项目合适的位置；</li><li>需要将 vendor 目录下的 jar 包放在 java 可找到的路径中。</li></ul></li></ul></li></ol><h3 id="步骤2：身份认证"><a href="#步骤2：身份认证" class="headerlink" title="步骤2：身份认证"></a>步骤2：身份认证</h3><p>在 Java 代码中使用 OCR API 前，需要进行身份认证，即在代码中设置 SecretId 和 SecretKey。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.tencentcloudapi.common.Credential;<br><span class="hljs-keyword">import</span> com.tencentcloudapi.ocr.v20181119.OcrClient;<br><span class="hljs-keyword">import</span> com.tencentcloudapi.ocr.v20181119.models.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecognizeTableOCR</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 设置 SecretId 和 SecretKey</span><br>        <span class="hljs-type">Credential</span> <span class="hljs-variable">cred</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Credential</span>(<span class="hljs-string">&quot;secretId&quot;</span>, <span class="hljs-string">&quot;secretKey&quot;</span>);<br><br><span class="hljs-comment">// 实例化一个http选项</span><br>        <span class="hljs-type">HttpProfile</span> <span class="hljs-variable">httpProfile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpProfile</span>();<br>        httpProfile.setEndpoint(<span class="hljs-string">&quot;ocr.tencentcloudapi.com&quot;</span>);<br>        <br>        <span class="hljs-comment">// 实例化一个client选项</span><br>        <span class="hljs-type">ClientProfile</span> <span class="hljs-variable">clientProfile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientProfile</span>();<br>        clientProfile.setHttpProfile(httpProfile);<br>        <br>        <span class="hljs-comment">// 实例化要请求产品的client对象,clientProfile是可选的</span><br>        <span class="hljs-type">OcrClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OcrClient</span>(cred, <span class="hljs-string">&quot;ap-guangzhou&quot;</span>, clientProfile);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤3：Base64编码"><a href="#步骤3：Base64编码" class="headerlink" title="步骤3：Base64编码"></a>步骤3：Base64编码</h3><p>OCR API 要求将图片转换为 Base64 编码的字符串格式。在 Java 代码中，可以使用以下方式将图片转换为 Base64 编码的字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecognizeTableOCR</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// ...省略身份认证的代码...</span><br><br>        <span class="hljs-comment">// 读取图片文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;path/to/image.jpg&quot;</span>);<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>) file.length()];<br>        inputStream.read(buffer);<br>        inputStream.close();<br><br>        <span class="hljs-comment">// 将图片转换为 Base64 编码的字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">imageBase64</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(buffer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤4：调用API"><a href="#步骤4：调用API" class="headerlink" title="步骤4：调用API"></a>步骤4：调用API</h3><p>将图片转换为 Base64 编码的字符串后，即可调用 OCR API 进行文字识别。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.tencentcloudapi.common.profile.ClientProfile;<br><span class="hljs-keyword">import</span> com.tencentcloudapi.common.profile.HttpProfile;<br><span class="hljs-keyword">import</span> com.tencentcloudapi.common.exception.TencentCloudSDKException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecognizeTableOCR</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// ...省略身份认证和生成imageBase64的代码...</span><br>            <br>            <span class="hljs-comment">// 实例化一个请求对象</span><br>            <span class="hljs-type">RecognizeTableOCRRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RecognizeTableOCRRequest</span>();<br>            req.setImageBase64(imageBase64);<br>            <span class="hljs-comment">// 返回的resp是一个RecognizeTableOCRResponse的实例，与请求对象对应</span><br>            <span class="hljs-type">RecognizeTableOCRResponse</span> <span class="hljs-variable">resp</span> <span class="hljs-operator">=</span> client.RecognizeTableOCR(req);<br>            <span class="hljs-comment">// 输出json格式的字符串回包</span><br>            System.out.println(RecognizeTableOCRResponse.toJsonString(resp));<br>        &#125; <span class="hljs-keyword">catch</span> (TencentCloudSDKException | IOException e) &#123;<br>            System.out.println(e.toString());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h3><p>以下是一个完整的示例，演示了如何使用 Java调用腾讯云的 OCR 服务来识别表格，并打印出识别结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> com.tencentcloudapi.common.Credential;<br><span class="hljs-keyword">import</span> com.tencentcloudapi.common.profile.ClientProfile;<br><span class="hljs-keyword">import</span> com.tencentcloudapi.common.profile.HttpProfile;<br><span class="hljs-keyword">import</span> com.tencentcloudapi.common.exception.TencentCloudSDKException;<br><span class="hljs-keyword">import</span> com.tencentcloudapi.ocr.v20181119.OcrClient;<br><span class="hljs-keyword">import</span> com.tencentcloudapi.ocr.v20181119.models.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecognizeTableOCR</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 读取图片文件</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">imagePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;src/main/resources/images/1.jpg&quot;</span>;<br>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(imagePath);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>) file.length()];<br>            inputStream.read(buffer);<br>            inputStream.close();<br><br>            <span class="hljs-comment">// 将图片转换为 Base64 编码的字符串</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">imageBase64</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(buffer);<br><br>            <span class="hljs-comment">// 实例化一个认证对象</span><br>            <span class="hljs-type">Credential</span> <span class="hljs-variable">cred</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Credential</span>(<span class="hljs-string">&quot;secretId&quot;</span>, <span class="hljs-string">&quot;secretKey&quot;</span>);<br>            <span class="hljs-comment">// 实例化一个http选项</span><br>            <span class="hljs-type">HttpProfile</span> <span class="hljs-variable">httpProfile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpProfile</span>();<br>            httpProfile.setEndpoint(<span class="hljs-string">&quot;ocr.tencentcloudapi.com&quot;</span>);<br>            <span class="hljs-comment">// 实例化一个client选项</span><br>            <span class="hljs-type">ClientProfile</span> <span class="hljs-variable">clientProfile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientProfile</span>();<br>            clientProfile.setHttpProfile(httpProfile);<br>            <span class="hljs-comment">// 实例化要请求产品的client对象,clientProfile是可选的</span><br>            <span class="hljs-type">OcrClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OcrClient</span>(cred, <span class="hljs-string">&quot;ap-guangzhou&quot;</span>, clientProfile);<br>            <span class="hljs-comment">// 实例化一个请求对象</span><br>            <span class="hljs-type">RecognizeTableOCRRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RecognizeTableOCRRequest</span>();<br>            req.setImageBase64(imageBase64);<br>            <span class="hljs-comment">// 返回的resp是一个RecognizeTableOCRResponse的实例，与请求对象对应</span><br>            <span class="hljs-type">RecognizeTableOCRResponse</span> <span class="hljs-variable">resp</span> <span class="hljs-operator">=</span> client.RecognizeTableOCR(req);<br>            <span class="hljs-comment">// 输出json格式的字符串回包</span><br>            System.out.println(RecognizeTableOCRResponse.toJsonString(resp));<br>        &#125; <span class="hljs-keyword">catch</span> (TencentCloudSDKException | IOException e) &#123;<br>            System.out.println(e.toString());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="具体案例"><a href="#具体案例" class="headerlink" title="具体案例"></a>具体案例</h3><p><em>您可以从以下仓库中下载示例代码：<a href="https://github.com/ShengjieJin/tencentcloudOCRDemo">https://github.com/ShengjieJin/tencentcloudOCRDemo</a></em></p><p>路径：<code>/Demo/1 Java Demo</code> 中提供了可直接运行的程序。</p><p>项目架构如下所示：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">1 Java Demo<br>|<span class="hljs-string">-- pom.xml</span><br><span class="hljs-string">`-- src</span><br><span class="hljs-string">    </span>|<span class="hljs-string">-- main</span><br><span class="hljs-string">    </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- java</span><br><span class="hljs-string">    </span>|<span class="hljs-string">   </span>|<span class="hljs-string">   `-- com</span><br><span class="hljs-string">    </span>|<span class="hljs-string">   </span>|<span class="hljs-string">       `-- example</span><br><span class="hljs-string">    </span>|<span class="hljs-string">   </span>|<span class="hljs-string">           `-- RecognizeTableOCR.java</span><br><span class="hljs-string">    </span>|<span class="hljs-string">   `-- resources</span><br><span class="hljs-string">    </span>|<span class="hljs-string">       `-- images</span><br><span class="hljs-string">    </span>|<span class="hljs-string">           `-- 1.jpg</span><br><span class="hljs-string">    </span>|<span class="hljs-string">               2.jpg</span><br><span class="hljs-string">    `-- test</span><br><span class="hljs-string">        </span>|<span class="hljs-string">-- java</span><br><span class="hljs-string">        </span>|<span class="hljs-string">   `-- com</span><br><span class="hljs-string">        </span>|<span class="hljs-string">       `-- example</span><br><span class="hljs-string">        `-- resources</span><br></code></pre></td></tr></table></figure><ol><li>配置好相关SDK和Maven环境后，将RecognizeTableOCR.java第27行中的 <code>&quot;SecretId&quot;, &quot;SecretKey&quot;</code> 替换为您自己的凭证。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">Credential cred = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Credential</span>(<span class="hljs-string">&quot;secretId&quot;</span>, <span class="hljs-string">&quot;secretKey&quot;</span>);<br></code></pre></td></tr></table></figure><ol start="2"><li>在路径：<code>/Demo/1 Java Demo</code>下打开命令行，执行以下命令带依赖地编译程序：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn compile assembly:single<br></code></pre></td></tr></table></figure><p>运行程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar ./target/OCR-1.0-SNAPSHOT-jar-with-dependencies.jar<br></code></pre></td></tr></table></figure><ol start="3"><li>程序运行后，变量 <code>resp</code> 中将保存 API 返回的 JSON 格式字符串。下面是打印内容的示例：</li></ol><p><img src="/2023/02/28/%E8%85%BE%E8%AE%AF%E4%BA%91OCR%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230226202830610.png" alt="image-20230226202830610"></p><h2 id="Net调用OCR-API"><a href="#Net调用OCR-API" class="headerlink" title=".Net调用OCR API"></a>.Net调用OCR API</h2><h3 id="步骤1：环境配置-1"><a href="#步骤1：环境配置-1" class="headerlink" title="步骤1：环境配置"></a>步骤1：环境配置</h3><ol><li><p>安装.NET Framework 4.5+ 或者 .NET Core 2.1；</p></li><li><p>创建一个ocr项目，并进入项目内：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">dotnet new console -o ocr<br><span class="hljs-built_in">cd</span> ./ocr<br></code></pre></td></tr></table></figure></li><li><p>通过 nuget 安装SDK：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dotnet add package TencentCloudSDK.Ocr<br></code></pre></td></tr></table></figure></li></ol><h3 id="步骤2：身份认证-1"><a href="#步骤2：身份认证-1" class="headerlink" title="步骤2：身份认证"></a>步骤2：身份认证</h3><p>在此步骤中，我们将配置身份认证凭证。请确保已获取您的腾讯云 API 密钥。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">Credential cred = <span class="hljs-keyword">new</span> Credential<br>&#123;<br>    SecretId = <span class="hljs-string">&quot;SecretId&quot;</span>,<br>    SecretKey = <span class="hljs-string">&quot;SecretKey&quot;</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><p>在以上代码中，您需要将<code>SecretId</code>和<code>SecretKey</code>替换为您的实际API密钥信息。</p><h3 id="步骤3：Base64编码-1"><a href="#步骤3：Base64编码-1" class="headerlink" title="步骤3：Base64编码"></a>步骤3：Base64编码</h3><p>将待识别的图片转换为Base64编码格式，并将编码后的字符串赋值给请求对象。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// 将图片转换为base64编码</span><br><span class="hljs-built_in">byte</span>[] imgBytes = File.ReadAllBytes(<span class="hljs-string">&quot;./images/1.jpg&quot;</span>);<br><span class="hljs-built_in">string</span> imgBase64 = Convert.ToBase64String(imgBytes);<br>req.ImageBase64 = imgBase64;<br><br></code></pre></td></tr></table></figure><h3 id="步骤4：调用API-1"><a href="#步骤4：调用API-1" class="headerlink" title="步骤4：调用API"></a>步骤4：调用API</h3><p>在身份认证和Base64编码后，即可调用API并获取响应结果。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// 实例化要请求产品的client对象,clientProfile是可选的</span><br>OcrClient client = <span class="hljs-keyword">new</span> OcrClient(cred, <span class="hljs-string">&quot;ap-guangzhou&quot;</span>, clientProfile);<br><span class="hljs-comment">// 实例化一个请求对象,每个接口都会对应一个request对象</span><br>RecognizeTableOCRRequest req = <span class="hljs-keyword">new</span> RecognizeTableOCRRequest();<br><span class="hljs-comment">// 将图片转换为base64编码</span><br><span class="hljs-built_in">byte</span>[] imgBytes = File.ReadAllBytes(<span class="hljs-string">&quot;./images/1.jpg&quot;</span>);<br><span class="hljs-built_in">string</span> imgBase64 = Convert.ToBase64String(imgBytes);<br>req.ImageBase64 = imgBase64;<br><span class="hljs-comment">// 返回的resp是一个RecognizeTableOCRResponse的实例，与请求对象对应</span><br>RecognizeTableOCRResponse resp = client.RecognizeTableOCRSync(req);<br><span class="hljs-comment">// 输出json格式的字符串回包</span><br>Console.WriteLine(AbstractModel.ToJsonString(resp));<br></code></pre></td></tr></table></figure><h3 id="完整示例-1"><a href="#完整示例-1" class="headerlink" title="完整示例"></a>完整示例</h3><p>以下是一个完整的示例，演示了如何使用 .Net 调用腾讯云的 OCR 服务来识别表格，并打印出识别结果。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Threading.Tasks;<br><span class="hljs-keyword">using</span> TencentCloud.Common;<br><span class="hljs-keyword">using</span> TencentCloud.Common.Profile;<br><span class="hljs-keyword">using</span> TencentCloud.Ocr.V20181119;<br><span class="hljs-keyword">using</span> TencentCloud.Ocr.V20181119.Models;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">TencentCloudExamples</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">RecognizeTableOCR</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                <span class="hljs-comment">// 实例化一个认证对象，入参需要传入腾讯云账户 SecretId 和 SecretKey，此处还需注意密钥对的保密</span><br>                Credential cred = <span class="hljs-keyword">new</span> Credential &#123;<br>                    SecretId = <span class="hljs-string">&quot;SecretId&quot;</span>,<br>                    SecretKey = <span class="hljs-string">&quot;SecretKey&quot;</span><br>                &#125;;<br>                <span class="hljs-comment">// 实例化一个client选项，可选的，没有特殊需求可以跳过</span><br>                ClientProfile clientProfile = <span class="hljs-keyword">new</span> ClientProfile();<br>                <span class="hljs-comment">// 实例化一个http选项，可选的，没有特殊需求可以跳过</span><br>                HttpProfile httpProfile = <span class="hljs-keyword">new</span> HttpProfile();<br>                httpProfile.Endpoint = (<span class="hljs-string">&quot;ocr.tencentcloudapi.com&quot;</span>);<br>                clientProfile.HttpProfile = httpProfile;<br><br>                <span class="hljs-comment">// 实例化要请求产品的client对象,clientProfile是可选的</span><br>                OcrClient client = <span class="hljs-keyword">new</span> OcrClient(cred, <span class="hljs-string">&quot;ap-guangzhou&quot;</span>, clientProfile);<br>                <span class="hljs-comment">// 实例化一个请求对象,每个接口都会对应一个request对象</span><br>                RecognizeTableOCRRequest req = <span class="hljs-keyword">new</span> RecognizeTableOCRRequest();<br>                <span class="hljs-comment">// 将图片转换为base64编码</span><br>                <span class="hljs-built_in">byte</span>[] imgBytes = File.ReadAllBytes(<span class="hljs-string">&quot;./images/1.jpg&quot;</span>);<br>                <span class="hljs-built_in">string</span> imgBase64 = Convert.ToBase64String(imgBytes);<br>                req.ImageBase64 = imgBase64;<br>                <span class="hljs-comment">// 返回的resp是一个RecognizeTableOCRResponse的实例，与请求对象对应</span><br>                RecognizeTableOCRResponse resp = client.RecognizeTableOCRSync(req);<br>                <span class="hljs-comment">// 输出json格式的字符串回包</span><br>                Console.WriteLine(AbstractModel.ToJsonString(resp));<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception e)<br>            &#123;<br>                Console.WriteLine(e.ToString());<br>            &#125;<br>            Console.Read();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="具体案例-1"><a href="#具体案例-1" class="headerlink" title="具体案例"></a>具体案例</h3><p><em>您可以从以下仓库中下载示例代码：<a href="https://github.com/ShengjieJin/tencentcloudOCRDemo">https://github.com/ShengjieJin/tencentcloudOCRDemo</a></em></p><p>路径：<code>/Demo/2 .Net Demo</code> 中提供了程序代码，但不能直接运行。</p><ol><li><p>按照步骤1配置好相关环境后，拷贝&#96;&#96;&#x2F;Demo&#x2F;2 .Net Demo<code>下的</code>images<code>和</code>Program.cs&#96;到ocr项目中：</p><img src="image-20230225202748341.png" alt="image-20230225202748341" style="zoom: 80%;" /><img src="image-20230225202805305.png" alt="image-20230225202805305" style="zoom:80%;" /></li><li><p>将Program.cs第18、19行中的 <code>&quot;SecretId&quot;,&quot;SecretKey&quot;</code> 替换为您自己的凭证。</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">Credential cred = <span class="hljs-keyword">new</span> Credential &#123;<br>                    SecretId = <span class="hljs-string">&quot;SecretId&quot;</span>,<br>                    SecretKey = <span class="hljs-string">&quot;SecretKey&quot;</span><br>                &#125;;<br></code></pre></td></tr></table></figure><ol start="3"><li>执行以下命令运行程序：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dotnet run<br></code></pre></td></tr></table></figure><p>程序运行后，变量 <code>response</code> 中将保存 API 返回的 JSON 格式字符串。下面是打印内容的示例：</p><p><img src="/2023/02/28/%E8%85%BE%E8%AE%AF%E4%BA%91OCR%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230225203023379.png" alt="image-20230225203023379"></p><h2 id="C-调用OCR-API"><a href="#C-调用OCR-API" class="headerlink" title="C++调用OCR API"></a>C++调用OCR API</h2><h3 id="步骤1：环境配置-2"><a href="#步骤1：环境配置-2" class="headerlink" title="步骤1：环境配置"></a>步骤1：环境配置</h3><p><em>（仅支持Linux环境）</em></p><ol><li><p>运行 <code>sudo apt-get update</code> 命令更新软件包列表</p></li><li><p>运行 <code>sudo apt-get upgrade</code> 命令更新系统中已安装软件包的版本。</p></li><li><p>运行<code>sudo apt install git</code>命令安装git</p></li><li><p>安装 cmake 编译工具：</p><ul><li>ubuntu：<code>sudo apt-get install cmake</code></li><li>centos：<code>yum install cmake3</code></li></ul></li><li><p>安装依赖库 libcurl：</p><ul><li>ubuntu：<code>sudo apt-get install libcurl4-openssl-dev</code></li><li>centos：<code>yum install libcurl-devel</code></li></ul></li><li><p>安装依赖库 openssl：</p><ul><li>ubuntu：<code>sudo apt-get install libssl-dev</code></li><li>centos：<code>yum install openssl-devel</code></li></ul></li><li><p>安装依赖库 libuuid：</p><ul><li>ubuntu：<code>sudo apt-get install uuid-dev</code></li><li>centos：<code>yum install libuuid-devel</code></li></ul></li><li><p>从源代码构建 SDK：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/TencentCloud/tencentcloud-sdk-cpp<br><span class="hljs-built_in">cd</span> tencentcloud-sdk-cpp<br><span class="hljs-built_in">mkdir</span> sdk_build<br><span class="hljs-built_in">cd</span> sdk_build<br><span class="hljs-comment"># centos 下使用 cmake3 ..</span><br><span class="hljs-comment"># 指定产品编译，分号;分隔</span><br>cmake -DBUILD_MODULES=<span class="hljs-string">&quot;ocr&quot;</span> ..<br>make<br>sudo make install<br></code></pre></td></tr></table></figure></li></ol><h3 id="步骤2：身份认证-2"><a href="#步骤2：身份认证-2" class="headerlink" title="步骤2：身份认证"></a>步骤2：身份认证</h3><p>在此步骤中，我们将配置身份认证凭证。请确保已获取您的腾讯云 API 密钥。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">Credential cred = <span class="hljs-built_in">Credential</span>(<span class="hljs-string">&quot;Your SecretId&quot;</span>, <span class="hljs-string">&quot;Your SecretKey&quot;</span>);<br></code></pre></td></tr></table></figure><p>在以上代码中，您需要将<code>yourSecretId</code>和<code>yourSecretKey</code>替换为您的实际API密钥信息。</p><h3 id="步骤3：Base64编码-2"><a href="#步骤3：Base64编码-2" class="headerlink" title="步骤3：Base64编码"></a>步骤3：Base64编码</h3><p>OCR API 接受 Base64 编码后的图像数据作为输入，因此需要将本地图片数据转换成 Base64 编码。这里提供了一个简单的 C++ 函数 <code>base64_encode</code> 来进行 Base64 编码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">static</span> <span class="hljs-type">const</span> std::string base64_chars =<br>    <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br>    <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span><br>    <span class="hljs-string">&quot;0123456789+/&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">is_base64</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> c)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-built_in">isalnum</span>(c) || (c == <span class="hljs-string">&#x27;+&#x27;</span>) || (c == <span class="hljs-string">&#x27;/&#x27;</span>));<br>&#125;<br><br><span class="hljs-function">std::string <span class="hljs-title">base64_encode</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">const</span>* bytes_to_encode, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> in_len)</span> </span>&#123;<br>  std::string ret;<br>  <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> char_array_3[<span class="hljs-number">3</span>];<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> char_array_4[<span class="hljs-number">4</span>];<br><br>  <span class="hljs-keyword">while</span> (in_len--) &#123;<br>    char_array_3[i++] = *(bytes_to_encode++);<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;<br>      char_array_4[<span class="hljs-number">0</span>] = (char_array_3[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">0xfc</span>) &gt;&gt; <span class="hljs-number">2</span>;<br>      char_array_4[<span class="hljs-number">1</span>] = ((char_array_3[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">0x03</span>) &lt;&lt; <span class="hljs-number">4</span>) + ((char_array_3[<span class="hljs-number">1</span>] &amp; <span class="hljs-number">0xf0</span>) &gt;&gt; <span class="hljs-number">4</span>);<br>      char_array_4[<span class="hljs-number">2</span>] = ((char_array_3[<span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x0f</span>) &lt;&lt; <span class="hljs-number">2</span>) + ((char_array_3[<span class="hljs-number">2</span>] &amp; <span class="hljs-number">0xc0</span>) &gt;&gt; <span class="hljs-number">6</span>);<br>      char_array_4[<span class="hljs-number">3</span>] = char_array_3[<span class="hljs-number">2</span>] &amp; <span class="hljs-number">0x3f</span>;<br><br>      <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; (i &lt; <span class="hljs-number">4</span>); i++)<br>        ret += base64_chars[char_array_4[i]];<br>      i = <span class="hljs-number">0</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (i) &#123;<br>    <span class="hljs-keyword">for</span> (j = i; j &lt; <span class="hljs-number">3</span>; j++)<br>      char_array_3[j] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>    char_array_4[<span class="hljs-number">0</span>] = (char_array_3[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">0xfc</span>) &gt;&gt; <span class="hljs-number">2</span>;<br>    char_array_4[<span class="hljs-number">1</span>] = ((char_array_3[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">0x03</span>) &lt;&lt; <span class="hljs-number">4</span>) + ((char_array_3[<span class="hljs-number">1</span>] &amp; <span class="hljs-number">0xf0</span>) &gt;&gt; <span class="hljs-number">4</span>);<br>    char_array_4[<span class="hljs-number">2</span>] = ((char_array_3[<span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x0f</span>) &lt;&lt; <span class="hljs-number">2</span>) + ((char_array_3[<span class="hljs-number">2</span>] &amp; <span class="hljs-number">0xc0</span>) &gt;&gt; <span class="hljs-number">6</span>);<br><br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; (j &lt; i + <span class="hljs-number">1</span>); j++)<br>      ret += base64_chars[char_array_4[j]];<br><br>    <span class="hljs-keyword">while</span> ((i++ &lt; <span class="hljs-number">3</span>))<br>      ret += <span class="hljs-string">&#x27;=&#x27;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用该函数对图片进行编码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 加载本地图片</span><br>string image_path = <span class="hljs-string">&quot;./images/1.jpg&quot;</span>;<br><span class="hljs-function">ifstream <span class="hljs-title">in</span><span class="hljs-params">(image_path, ios::in | ios::binary)</span></span>;<br>ostringstream oss;<br>oss &lt;&lt; in.<span class="hljs-built_in">rdbuf</span>();<br>string image_binary = oss.<span class="hljs-built_in">str</span>();<br><br><span class="hljs-comment">// 将二进制图像数据转换为Base64编码</span><br>string image_base64 = <span class="hljs-built_in">base64_encode</span>(<span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*&gt;(image_binary.<span class="hljs-built_in">data</span>()), image_binary.<span class="hljs-built_in">size</span>());<br></code></pre></td></tr></table></figure><h3 id="步骤4：调用API-2"><a href="#步骤4：调用API-2" class="headerlink" title="步骤4：调用API"></a>步骤4：调用API</h3><p>调用API的过程需按照以下步骤：</p><ol><li><p>实例化http选项、client选项、client对象、请求对象，每个接口都会对应一个request对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 实例化一个http选项，可选的，没有特殊需求可以跳过</span><br>HttpProfile httpProfile = <span class="hljs-built_in">HttpProfile</span>();<br>httpProfile.<span class="hljs-built_in">SetEndpoint</span>(<span class="hljs-string">&quot;ocr.tencentcloudapi.com&quot;</span>);<br><br><span class="hljs-comment">// 实例化一个client选项，可选的，没有特殊需求可以跳过</span><br>ClientProfile clientProfile = <span class="hljs-built_in">ClientProfile</span>();<br>clientProfile.<span class="hljs-built_in">SetHttpProfile</span>(httpProfile);<br><br><span class="hljs-comment">// 实例化要请求产品的client对象,clientProfile是可选的</span><br>OcrClient client = <span class="hljs-built_in">OcrClient</span>(cred, <span class="hljs-string">&quot;ap-guangzhou&quot;</span>, clientProfile);<br><br><span class="hljs-comment">// 实例化一个请求对象,每个接口都会对应一个request对象</span><br>RecognizeTableOCRRequest req = <span class="hljs-built_in">RecognizeTableOCRRequest</span>();<br></code></pre></td></tr></table></figure></li><li><p>填充请求对象的参数，如图片数据等。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 将Base64编码图像数据赋值到请求对象中</span><br>req.<span class="hljs-built_in">SetImageBase64</span>(image_base64);<br></code></pre></td></tr></table></figure></li><li><p>调用client对象的接口，并传入请求对象，使用腾讯云的<code>RecognizeTableOCR</code>接口来识别表格图片。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 返回的resp是一个RecognizeTableOCRResponse的实例，与请求对象对应</span><br><span class="hljs-keyword">auto</span> outcome = client.<span class="hljs-built_in">RecognizeTableOCR</span>(req);<br></code></pre></td></tr></table></figure></li><li><p>处理返回结果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">if</span> (!outcome.<span class="hljs-built_in">IsSuccess</span>())<br>&#123;<br>    cout &lt;&lt; outcome.<span class="hljs-built_in">GetError</span>().<span class="hljs-built_in">PrintAll</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>RecognizeTableOCRResponse resp = outcome.<span class="hljs-built_in">GetResult</span>();<br><span class="hljs-comment">// 输出json格式的字符串回包</span><br>cout &lt;&lt; resp.<span class="hljs-built_in">ToJsonString</span>() &lt;&lt; endl;<br></code></pre></td></tr></table></figure></li></ol><h3 id="完整示例-2"><a href="#完整示例-2" class="headerlink" title="完整示例"></a>完整示例</h3><p>下面是一个完整的示例程序，它将读取本地的一张表格图片，并调用腾讯云的<code>RecognizeTableOCR</code>接口来识别表格。具体的代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tencentcloud/core/Credential.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tencentcloud/core/profile/ClientProfile.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tencentcloud/core/profile/HttpProfile.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tencentcloud/ocr/v20181119/OcrClient.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tencentcloud/ocr/v20181119/model/RecognizeTableOCRRequest.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tencentcloud/ocr/v20181119/model/RecognizeTableOCRResponse.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> TencentCloud;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> TencentCloud::Ocr::V20181119;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> TencentCloud::Ocr::V20181119::Model;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> std::string base64_chars =<br>    <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br>    <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span><br>    <span class="hljs-string">&quot;0123456789+/&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">is_base64</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> c)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-built_in">isalnum</span>(c) || (c == <span class="hljs-string">&#x27;+&#x27;</span>) || (c == <span class="hljs-string">&#x27;/&#x27;</span>));<br>&#125;<br><br><span class="hljs-function">std::string <span class="hljs-title">base64_encode</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">const</span>* bytes_to_encode, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> in_len)</span> </span>&#123;<br>  std::string ret;<br>  <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> char_array_3[<span class="hljs-number">3</span>];<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> char_array_4[<span class="hljs-number">4</span>];<br><br>  <span class="hljs-keyword">while</span> (in_len--) &#123;<br>    char_array_3[i++] = *(bytes_to_encode++);<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;<br>      char_array_4[<span class="hljs-number">0</span>] = (char_array_3[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">0xfc</span>) &gt;&gt; <span class="hljs-number">2</span>;<br>      char_array_4[<span class="hljs-number">1</span>] = ((char_array_3[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">0x03</span>) &lt;&lt; <span class="hljs-number">4</span>) + ((char_array_3[<span class="hljs-number">1</span>] &amp; <span class="hljs-number">0xf0</span>) &gt;&gt; <span class="hljs-number">4</span>);<br>      char_array_4[<span class="hljs-number">2</span>] = ((char_array_3[<span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x0f</span>) &lt;&lt; <span class="hljs-number">2</span>) + ((char_array_3[<span class="hljs-number">2</span>] &amp; <span class="hljs-number">0xc0</span>) &gt;&gt; <span class="hljs-number">6</span>);<br>      char_array_4[<span class="hljs-number">3</span>] = char_array_3[<span class="hljs-number">2</span>] &amp; <span class="hljs-number">0x3f</span>;<br><br>      <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; (i &lt; <span class="hljs-number">4</span>); i++)<br>        ret += base64_chars[char_array_4[i]];<br>      i = <span class="hljs-number">0</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (i) &#123;<br>    <span class="hljs-keyword">for</span> (j = i; j &lt; <span class="hljs-number">3</span>; j++)<br>      char_array_3[j] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>    char_array_4[<span class="hljs-number">0</span>] = (char_array_3[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">0xfc</span>) &gt;&gt; <span class="hljs-number">2</span>;<br>    char_array_4[<span class="hljs-number">1</span>] = ((char_array_3[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">0x03</span>) &lt;&lt; <span class="hljs-number">4</span>) + ((char_array_3[<span class="hljs-number">1</span>] &amp; <span class="hljs-number">0xf0</span>) &gt;&gt; <span class="hljs-number">4</span>);<br>    char_array_4[<span class="hljs-number">2</span>] = ((char_array_3[<span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x0f</span>) &lt;&lt; <span class="hljs-number">2</span>) + ((char_array_3[<span class="hljs-number">2</span>] &amp; <span class="hljs-number">0xc0</span>) &gt;&gt; <span class="hljs-number">6</span>);<br><br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; (j &lt; i + <span class="hljs-number">1</span>); j++)<br>      ret += base64_chars[char_array_4[j]];<br><br>    <span class="hljs-keyword">while</span> ((i++ &lt; <span class="hljs-number">3</span>))<br>      ret += <span class="hljs-string">&#x27;=&#x27;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 实例化一个认证对象，入参需要传入腾讯云账户 SecretId 和 SecretKey</span><br>        Credential cred = <span class="hljs-built_in">Credential</span>(<span class="hljs-string">&quot;AKIDfM1fEkDezHUdgdTEpJcjcGWaR4UhfSVL&quot;</span>, <span class="hljs-string">&quot;3rUQID2iHlFZot7A5tbEsNix7KakmcMx&quot;</span>);<br><br>        <span class="hljs-comment">// 实例化一个http选项，可选的，没有特殊需求可以跳过</span><br>        HttpProfile httpProfile = <span class="hljs-built_in">HttpProfile</span>();<br>        httpProfile.<span class="hljs-built_in">SetEndpoint</span>(<span class="hljs-string">&quot;ocr.tencentcloudapi.com&quot;</span>);<br><br>        <span class="hljs-comment">// 实例化一个client选项，可选的，没有特殊需求可以跳过</span><br>        ClientProfile clientProfile = <span class="hljs-built_in">ClientProfile</span>();<br>        clientProfile.<span class="hljs-built_in">SetHttpProfile</span>(httpProfile);<br>        <span class="hljs-comment">// 实例化要请求产品的client对象,clientProfile是可选的</span><br>        OcrClient client = <span class="hljs-built_in">OcrClient</span>(cred, <span class="hljs-string">&quot;ap-guangzhou&quot;</span>, clientProfile);<br><br>        <span class="hljs-comment">// 实例化一个请求对象,每个接口都会对应一个request对象</span><br>        RecognizeTableOCRRequest req = <span class="hljs-built_in">RecognizeTableOCRRequest</span>();<br>        <br>        <span class="hljs-comment">// 加载本地图片</span><br>        string image_path = <span class="hljs-string">&quot;./images/1.jpg&quot;</span>;<br>        <span class="hljs-function">ifstream <span class="hljs-title">in</span><span class="hljs-params">(image_path, ios::in | ios::binary)</span></span>;<br>        ostringstream oss;<br>        oss &lt;&lt; in.<span class="hljs-built_in">rdbuf</span>();<br>        string image_binary = oss.<span class="hljs-built_in">str</span>();<br>        <br>        <span class="hljs-comment">// 将二进制图像数据转换为Base64编码</span><br>        string image_base64 = <span class="hljs-built_in">base64_encode</span>(<span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*&gt;(image_binary.<span class="hljs-built_in">data</span>()), image_binary.<span class="hljs-built_in">size</span>());<br>        <br>        <span class="hljs-comment">// 将Base64编码图像数据赋值到请求对象中</span><br>        req.<span class="hljs-built_in">SetImageBase64</span>(image_base64);<br><br><br>        <span class="hljs-comment">// 返回的resp是一个RecognizeTableOCRResponse的实例，与请求对象对应</span><br>        <span class="hljs-keyword">auto</span> outcome = client.<span class="hljs-built_in">RecognizeTableOCR</span>(req);<br>        <span class="hljs-keyword">if</span> (!outcome.<span class="hljs-built_in">IsSuccess</span>())<br>        &#123;<br>            cout &lt;&lt; outcome.<span class="hljs-built_in">GetError</span>().<span class="hljs-built_in">PrintAll</span>() &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        RecognizeTableOCRResponse resp = outcome.<span class="hljs-built_in">GetResult</span>();<br>        <span class="hljs-comment">// 输出json格式的字符串回包</span><br>        cout &lt;&lt; resp.<span class="hljs-built_in">ToJsonString</span>() &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="具体案例-2"><a href="#具体案例-2" class="headerlink" title="具体案例"></a>具体案例</h3><p><em>您可以从以下仓库中下载示例代码：<a href="https://github.com/ShengjieJin/tencentcloudOCRDemo">https://github.com/ShengjieJin/tencentcloudOCRDemo</a></em></p><p>路径：<code>/Demo/3 C++ Demo</code> 中提供了可直接运行的程序。</p><ol><li>配置好相关环境后，将main.cpp第71行中的 <code>&quot;SecretId&quot;, &quot;SecretKey&quot;</code> 替换为您自己的凭证。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">Credential cred = <span class="hljs-built_in">Credential</span>(<span class="hljs-string">&quot;SecretId&quot;</span>, <span class="hljs-string">&quot;SecretKey&quot;</span>);<br></code></pre></td></tr></table></figure><ol start="2"><li>执行以下命令编译并运行程序：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -o main main.cpp -I/usr/local/include/tencentcloud/ocr/v20181119 -L/usr/local/lib -ltencentcloud-sdk-cpp-core -ltencentcloud-sdk-cpp-ocr<br><br>./main<br></code></pre></td></tr></table></figure><ol start="3"><li>程序运行后，变量 <code>resp</code> 中将保存 API 返回的 JSON 格式字符串。下面是打印内容的示例：</li></ol><p><img src="/2023/02/28/%E8%85%BE%E8%AE%AF%E4%BA%91OCR%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230225164915917.png" alt="image-20230225164915917"></p><h2 id="Node-js调用OCR-API"><a href="#Node-js调用OCR-API" class="headerlink" title="Node.js调用OCR API"></a>Node.js调用OCR API</h2><h3 id="步骤1：环境配置-3"><a href="#步骤1：环境配置-3" class="headerlink" title="步骤1：环境配置"></a>步骤1：环境配置</h3><ol><li>安装 Node.js 环境。您可以在 <a href="https://nodejs.org/">Node.js 官网</a> 下载安装包并进行安装。</li><li>通过npm安装Tencent Cloud SDK:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install tencentcloud-sdk-nodejs --save<br></code></pre></td></tr></table></figure><h3 id="步骤2：身份认证-3"><a href="#步骤2：身份认证-3" class="headerlink" title="步骤2：身份认证"></a>步骤2：身份认证</h3><p>在您的代码中，您需要设置以下配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> tencentcloud = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tencentcloud-sdk-nodejs&quot;</span>);<br><span class="hljs-comment">// 导入 OCR 客户端</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">OcrClient</span> = tencentcloud.<span class="hljs-property">ocr</span>.<span class="hljs-property">v20181119</span>.<span class="hljs-property">Client</span>;<br><br><span class="hljs-keyword">const</span> clientConfig = &#123;<br>  <span class="hljs-attr">credential</span>: &#123;<br>    <span class="hljs-attr">secretId</span>: <span class="hljs-string">&quot;yourSecretId&quot;</span>,<br>    <span class="hljs-attr">secretKey</span>: <span class="hljs-string">&quot;yourSecretKey&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">region</span>: <span class="hljs-string">&quot;ap-guangzhou&quot;</span>, <span class="hljs-comment">// 设置请求地域</span><br>  <span class="hljs-attr">profile</span>: &#123;<br>    <span class="hljs-attr">httpProfile</span>: &#123;<br>      <span class="hljs-attr">endpoint</span>: <span class="hljs-string">&quot;ocr.tencentcloudapi.com&quot;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">// 实例化 OCR 客户端</span><br><span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OcrClient</span>(clientConfig);<br></code></pre></td></tr></table></figure><p>在以上代码中，您需要将<code>yourSecretId</code>和<code>yourSecretKey</code>替换为您的实际API密钥信息。并且，您需要设置<code>region</code>为您需要请求的地域信息。<code>profile</code>部分设置了API请求的基础信息。</p><h3 id="步骤3：base64编码"><a href="#步骤3：base64编码" class="headerlink" title="步骤3：base64编码"></a>步骤3：base64编码</h3><p>在使用OCR API时，您需要将您的图片文件编码为base64格式。您可以使用以下代码将图片文件编码为base64格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> imagePath = path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;images&quot;</span>, <span class="hljs-string">&quot;1.jpg&quot;</span>);<br><br><span class="hljs-comment">// 读取图片文件</span><br><span class="hljs-keyword">let</span> imageBase64;<br><span class="hljs-keyword">try</span> &#123;<br>  imageBase64 = fs.<span class="hljs-title function_">readFileSync</span>(imagePath, <span class="hljs-string">&quot;base64&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`Failed to read image file: <span class="hljs-subst">$&#123;err.message&#125;</span>`</span>);<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在以上代码中，您需要将<code>imagePath</code>替换为您的图片文件的实际路径。如果读取图片文件失败，您需要捕获错误并处理。</p><h3 id="步骤4：调用API-3"><a href="#步骤4：调用API-3" class="headerlink" title="步骤4：调用API"></a>步骤4：调用API</h3><p>在设置完请求参数之后，您可以使用以下代码调用OCR API：</p><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> params = &#123;<br>  <span class="hljs-title class_">ImageBase64</span>: imageBase64, <span class="hljs-comment">// 设置图片数据</span><br>&#125;;<br><br><span class="hljs-comment">// 发送 OCR 请求</span><br>client.<span class="hljs-title class_">RecognizeTableOCR</span>(params)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`OCR request failed: <span class="hljs-subst">$&#123;err.message&#125;</span>`</span>);<br>  &#125;);<br></code></pre></td></tr></table></figure><p>在以上代码中，<code>params</code>对象中设置了API请求的参数信息。<code>client.RecognizeTableOCR(params)</code>部分是调用OCR API的实际代码。</p><h3 id="完整示例-3"><a href="#完整示例-3" class="headerlink" title="完整示例"></a>完整示例</h3><p>以下是一个完整的示例，演示了如何使用 Node.js 调用腾讯云的 OCR 服务来识别表格，并打印出识别结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> tencentcloud = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tencentcloud-sdk-nodejs&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><br><span class="hljs-comment">// 导入 OCR 客户端</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">OcrClient</span> = tencentcloud.<span class="hljs-property">ocr</span>.<span class="hljs-property">v20181119</span>.<span class="hljs-property">Client</span>;<br><br><span class="hljs-comment">// 设置密钥信息 yourSecretId yourSecretKey</span><br><span class="hljs-keyword">const</span> clientConfig = &#123;<br>  <span class="hljs-attr">credential</span>: &#123;<br>    <span class="hljs-attr">secretId</span>: <span class="hljs-string">&quot;yourSecretId&quot;</span>,<br>    <span class="hljs-attr">secretKey</span>: <span class="hljs-string">&quot;yourSecretKey&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">region</span>: <span class="hljs-string">&quot;ap-guangzhou&quot;</span>, <span class="hljs-comment">// 设置请求地域</span><br>  <span class="hljs-attr">profile</span>: &#123;<br>    <span class="hljs-attr">httpProfile</span>: &#123;<br>      <span class="hljs-attr">endpoint</span>: <span class="hljs-string">&quot;ocr.tencentcloudapi.com&quot;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">// 设置图片路径</span><br><span class="hljs-keyword">const</span> imagePath = path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;images&quot;</span>, <span class="hljs-string">&quot;1.jpg&quot;</span>);<br><br><span class="hljs-comment">// 实例化 OCR 客户端</span><br><span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OcrClient</span>(clientConfig);<br><br><span class="hljs-comment">// 读取图片文件</span><br><span class="hljs-keyword">let</span> imageBase64;<br><span class="hljs-keyword">try</span> &#123;<br>  imageBase64 = fs.<span class="hljs-title function_">readFileSync</span>(imagePath, <span class="hljs-string">&quot;base64&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`Failed to read image file: <span class="hljs-subst">$&#123;err.message&#125;</span>`</span>);<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// 设置请求参数</span><br><span class="hljs-keyword">const</span> params = &#123;<br>  <span class="hljs-title class_">ImageBase64</span>: imageBase64, <span class="hljs-comment">// 设置图片数据</span><br>&#125;;<br><br><span class="hljs-comment">// 发送 OCR 请求</span><br>client.<span class="hljs-title class_">RecognizeTableOCR</span>(params)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`OCR request failed: <span class="hljs-subst">$&#123;err.message&#125;</span>`</span>);<br>  &#125;);<br></code></pre></td></tr></table></figure><h3 id="具体案例-3"><a href="#具体案例-3" class="headerlink" title="具体案例"></a>具体案例</h3><p><em>您可以从以下仓库中下载示例代码：<a href="https://github.com/ShengjieJin/tencentcloudOCRDemo">https://github.com/ShengjieJin/tencentcloudOCRDemo</a></em></p><p>在这里，我们提供两个不同版本的示例，它们都可以直接运行：</p><ul><li><strong>基础版本</strong>：它读取了位于 .&#x2F;images&#x2F;1.jpg 路径下的图片，并将识别结果直接打印在控制台窗口上。</li><li><strong>进阶版本</strong>：该版本提供了前后端交互的示例，它可以将识别结果打印在网页上。</li></ul><h4 id="基础版本"><a href="#基础版本" class="headerlink" title="基础版本"></a>基础版本</h4><p>路径：<code>/Demo/4 Node.js Demo/basic version</code></p><ol><li>在该文件夹下，点击<code>在终端中打开</code></li></ol><img src="image-20230225111459719.png" alt="image-20230225111459719" style="zoom:33%;" /><ol start="2"><li>输入以下命令以安装必要的依赖：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install tencentcloud-sdk-nodejs --save<br></code></pre></td></tr></table></figure><ol start="3"><li>将 <code>server.js</code> 第 11 行、12 行中的 <code>yourSecretId</code> 和 <code>yourSecretKey</code> 替换为您自己的凭证。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">credential</span>: &#123;<br>    <span class="hljs-attr">secretId</span>: <span class="hljs-string">&quot;yourSecretId&quot;</span>,<br>    <span class="hljs-attr">secretKey</span>: <span class="hljs-string">&quot;yourSecretKey&quot;</span>,<br>  &#125;,<br></code></pre></td></tr></table></figure><ol start="4"><li>输入以下命令运行脚本：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">node server.js<br></code></pre></td></tr></table></figure><p>输出结果如下：</p><p><img src="/2023/02/28/%E8%85%BE%E8%AE%AF%E4%BA%91OCR%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230225112037933.png" alt="image-20230225112037933"></p><p>输出参数参考<a href="https://console.cloud.tencent.com/api/explorer?Product=ocr&Version=2018-11-19&Action=RecognizeTableOCR">腾讯云 API Explorer</a></p><p><img src="/2023/02/28/%E8%85%BE%E8%AE%AF%E4%BA%91OCR%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230225112645097.png" alt="image-20230225112645097"></p><h4 id="进阶版本"><a href="#进阶版本" class="headerlink" title="进阶版本"></a>进阶版本</h4><p>路径：<code>/Demo/4 Node.js Demo/advanced version</code></p><ol><li>在该文件夹下，点击<code>在终端中打开</code></li></ol><img src="image-20230225111459719.png" alt="image-20230225111459719" style="zoom:33%;" /><ol start="2"><li>输入以下命令配置好相关环境</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install tencentcloud-sdk-nodejs --save<br>npm install express<br>npm install multer<br></code></pre></td></tr></table></figure><ol start="3"><li>将server.js第23行、24行中的 <code>yourSecretId</code>和<code>yourSecretKey</code> 替换为您自己的凭证。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">credential</span>: &#123;<br>    <span class="hljs-attr">secretId</span>: <span class="hljs-string">&quot;yourSecretId&quot;</span>,<br>    <span class="hljs-attr">secretKey</span>: <span class="hljs-string">&quot;yourSecretKey&quot;</span>,<br>  &#125;,<br></code></pre></td></tr></table></figure><ol start="4"><li>输入以下命令运行脚本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">node server.js<br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/%E8%85%BE%E8%AE%AF%E4%BA%91OCR%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230225113103668.png" alt="image-20230225113103668"></p><ol start="5"><li>打开浏览器，输入<a href="http://localhost:3000/">http://localhost:3000/</a></li></ol><p><img src="/2023/02/28/%E8%85%BE%E8%AE%AF%E4%BA%91OCR%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230225113300633.png" alt="image-20230225113300633"></p><ol start="6"><li>选择需要识别的表格图片，并点击提交，识别结果展示如下：</li></ol><p><img src="/2023/02/28/%E8%85%BE%E8%AE%AF%E4%BA%91OCR%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230225113439390-16772960811365.png" alt="image-20230225113439390"></p><h2 id="Python调用OCR-API"><a href="#Python调用OCR-API" class="headerlink" title="Python调用OCR API"></a>Python调用OCR API</h2><h3 id="步骤1：环境配置-4"><a href="#步骤1：环境配置-4" class="headerlink" title="步骤1：环境配置"></a>步骤1：环境配置</h3><ol><li>Python 3.6至3.9版本。</li><li>通过 Pip 安装 Tencent Cloud SDK:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install -i https://mirrors.tencent.com/pypi/simple/ --upgrade tencentcloud-sdk-python<br></code></pre></td></tr></table></figure><h3 id="步骤2：身份认证-4"><a href="#步骤2：身份认证-4" class="headerlink" title="步骤2：身份认证"></a>步骤2：身份认证</h3><p>在此步骤中，我们将配置身份认证凭证。请确保已获取您的腾讯云 API 密钥。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<br><span class="hljs-keyword">from</span> tencentcloud.common <span class="hljs-keyword">import</span> credential<br><span class="hljs-keyword">from</span> tencentcloud.common.profile.client_profile <span class="hljs-keyword">import</span> ClientProfile<br><span class="hljs-keyword">from</span> tencentcloud.common.profile.http_profile <span class="hljs-keyword">import</span> HttpProfile<br><span class="hljs-keyword">from</span> tencentcloud.common.exception.tencent_cloud_sdk_exception <span class="hljs-keyword">import</span> TencentCloudSDKException<br><span class="hljs-keyword">from</span> tencentcloud.ocr.v20181119 <span class="hljs-keyword">import</span> ocr_client, models<br><br>cred = credential.Credential(<span class="hljs-string">&quot;SecretId&quot;</span>, <span class="hljs-string">&quot;SecretKey&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="步骤3：base64编码-1"><a href="#步骤3：base64编码-1" class="headerlink" title="步骤3：base64编码"></a>步骤3：base64编码</h3><p>在此步骤中，我们示范了如何将一张jpg格式图片编码为api需要的base64格式.图片为本地读入，请您在具体调用时根据需求进行修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读入图片并编码为base64</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./images/1.jpg&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> image_file:<br>    <span class="hljs-comment"># 打开图片并转换为PIL Image对象</span><br>    image = Image.<span class="hljs-built_in">open</span>(image_file)<br><br>    <span class="hljs-comment"># 将PIL Image对象转换为BytesIO对象</span><br>    buffer = BytesIO()<br>    image.save(buffer, <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;JPEG&#x27;</span>)<br><br>    <span class="hljs-comment"># 将BytesIO对象中的数据读取为二进制数据，并使用base64编码</span><br>    img_base64 = base64.b64encode(buffer.getvalue()).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="步骤4：调用-API"><a href="#步骤4：调用-API" class="headerlink" title="步骤4：调用 API"></a>步骤4：调用 API</h3><p>在此步骤中，我们将使用 <code>cred</code> 对象调用腾讯云 OCR API的 <code>RecognizeTableOCR</code> API进行表格识别，并将响应保存到变量<code>resp</code>中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># 实例化一个http选项，可选的，没有特殊需求可以跳过</span><br>    httpProfile = HttpProfile()<br>    httpProfile.endpoint = <span class="hljs-string">&quot;ocr.tencentcloudapi.com&quot;</span><br><br>    <span class="hljs-comment"># 实例化一个client选项，可选的，没有特殊需求可以跳过</span><br>    clientProfile = ClientProfile()<br>    clientProfile.httpProfile = httpProfile<br><br>    <span class="hljs-comment"># 实例化要请求产品的client对象,clientProfile是可选的</span><br>    client = ocr_client.OcrClient(cred, <span class="hljs-string">&quot;ap-guangzhou&quot;</span>, clientProfile)<br><br>    <span class="hljs-comment"># 实例化一个请求对象,每个接口都会对应一个request对象</span><br>    req = models.RecognizeTableOCRRequest()<br>    params = &#123;<br>        <span class="hljs-string">&quot;ImageBase64&quot;</span>: img_base64,  <span class="hljs-comment"># 将图片的base64格式字符串传递给API</span><br>    &#125;<br>    req.from_json_string(json.dumps(params))<br><br>    <span class="hljs-comment"># 返回的resp是一个RecognizeTableOCRResponse的实例，与请求对象对应</span><br>    resp = client.RecognizeTableOCR(req)<br><br>    <span class="hljs-comment"># 输出json格式的字符串回包</span><br>    <span class="hljs-built_in">print</span>(resp.to_json_string())<br><br><span class="hljs-keyword">except</span> TencentCloudSDKException <span class="hljs-keyword">as</span> err:<br>    <span class="hljs-built_in">print</span>(err)<br></code></pre></td></tr></table></figure><h3 id="完整示例-4"><a href="#完整示例-4" class="headerlink" title="完整示例"></a>完整示例</h3><p>以下是一个完整的示例，演示了如何使用 Python 调用腾讯云的 OCR 服务来识别表格，并打印出识别结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<br><span class="hljs-keyword">from</span> tencentcloud.common <span class="hljs-keyword">import</span> credential<br><span class="hljs-keyword">from</span> tencentcloud.common.profile.client_profile <span class="hljs-keyword">import</span> ClientProfile<br><span class="hljs-keyword">from</span> tencentcloud.common.profile.http_profile <span class="hljs-keyword">import</span> HttpProfile<br><span class="hljs-keyword">from</span> tencentcloud.common.exception.tencent_cloud_sdk_exception <span class="hljs-keyword">import</span> TencentCloudSDKException<br><span class="hljs-keyword">from</span> tencentcloud.ocr.v20181119 <span class="hljs-keyword">import</span> ocr_client, models<br><br><span class="hljs-comment"># 将图片编码为base64</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./images/1.jpg&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> image_file:<br>    <span class="hljs-comment"># 打开图片并转换为PIL Image对象</span><br>    image = Image.<span class="hljs-built_in">open</span>(image_file)<br><br>    <span class="hljs-comment"># 将PIL Image对象转换为BytesIO对象</span><br>    buffer = BytesIO()<br>    image.save(buffer, <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;JPEG&#x27;</span>)<br><br>    <span class="hljs-comment"># 将BytesIO对象中的数据读取为二进制数据，并使用base64编码</span><br>    img_base64 = base64.b64encode(buffer.getvalue()).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># 实例化一个认证对象，入参需要传入腾讯云账户 SecretId 和 SecretKey</span><br>    cred = credential.Credential(<span class="hljs-string">&quot;SecretId&quot;</span>, <span class="hljs-string">&quot;SecretKey&quot;</span>)<br><br>    <span class="hljs-comment"># 实例化一个http选项，可选的，没有特殊需求可以跳过</span><br>    httpProfile = HttpProfile()<br>    httpProfile.endpoint = <span class="hljs-string">&quot;ocr.tencentcloudapi.com&quot;</span><br><br>    <span class="hljs-comment"># 实例化一个client选项，可选的，没有特殊需求可以跳过</span><br>    clientProfile = ClientProfile()<br>    clientProfile.httpProfile = httpProfile<br><br>    <span class="hljs-comment"># 实例化要请求产品的client对象,clientProfile是可选的</span><br>    client = ocr_client.OcrClient(cred, <span class="hljs-string">&quot;ap-guangzhou&quot;</span>, clientProfile)<br><br>    <span class="hljs-comment"># 实例化一个请求对象,每个接口都会对应一个request对象</span><br>    req = models.RecognizeTableOCRRequest()<br>    params = &#123;<br>        <span class="hljs-string">&quot;ImageBase64&quot;</span>: img_base64,  <span class="hljs-comment"># 将图片的base64格式字符串传递给API</span><br>    &#125;<br>    req.from_json_string(json.dumps(params))<br><br>    <span class="hljs-comment"># 返回的resp是一个RecognizeTableOCRResponse的实例，与请求对象对应</span><br>    resp = client.RecognizeTableOCR(req)<br><br>    <span class="hljs-comment"># 输出json格式的字符串回包</span><br>    <span class="hljs-built_in">print</span>(resp.to_json_string())<br><br><span class="hljs-keyword">except</span> TencentCloudSDKException <span class="hljs-keyword">as</span> err:<br>    <span class="hljs-built_in">print</span>(err)<br></code></pre></td></tr></table></figure><h3 id="具体案例-4"><a href="#具体案例-4" class="headerlink" title="具体案例"></a>具体案例</h3><p><em>您可以从以下仓库中下载示例代码：<a href="https://github.com/ShengjieJin/tencentcloudOCRDemo">https://github.com/ShengjieJin/tencentcloudOCRDemo</a></em></p><p>路径：<code>/Demo/5 Python Demo</code> 中提供了可直接运行的程序。</p><ol><li>配置好相关环境后，将main.py第25行中的 <code>Credential(&quot;SecretId&quot;, &quot;SecretKey&quot;)</code> 替换为您自己的凭证。然后运行程序。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cred = credential.Credential(<span class="hljs-string">&quot;SecretId&quot;</span>, <span class="hljs-string">&quot;SecretKey&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>注意：关闭VPN！！！</strong></p><ol start="2"><li>程序运行后，变量 <code>resp</code> 中将保存 API 返回的 JSON 格式字符串。下面是打印内容的示例：</li></ol><p><img src="/2023/02/28/%E8%85%BE%E8%AE%AF%E4%BA%91OCR%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230224114141754.png" alt="image-20230224114141754"></p><h2 id="GO调用OCR-API"><a href="#GO调用OCR-API" class="headerlink" title="GO调用OCR API"></a>GO调用OCR API</h2><h3 id="步骤1：环境配置-5"><a href="#步骤1：环境配置-5" class="headerlink" title="步骤1：环境配置"></a>步骤1：环境配置</h3><ol><li><p>Go 1.9 版本及以上</p></li><li><p>初始化一个名叫<code>ocr</code>的模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">go mod init ocr<br></code></pre></td></tr></table></figure></li><li><p>腾讯云镜像加速go get下载（<strong>可选</strong>）：</p><ul><li><p>Linux 或 MacOS：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> GOPROXY=https://mirrors.tencent.com/go/<br></code></pre></td></tr></table></figure></li><li><p>Windows：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">set</span> GOPROXY=https://mirrors.tencent.com/go/<br></code></pre></td></tr></table></figure></li></ul></li><li><p>安装公共基础包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">go get -v -u github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common<br></code></pre></td></tr></table></figure></li><li><p>安装ocr产品包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">go get -v -u github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/ocr<br></code></pre></td></tr></table></figure></li></ol><h3 id="步骤2：身份认证-5"><a href="#步骤2：身份认证-5" class="headerlink" title="步骤2：身份认证"></a>步骤2：身份认证</h3><p>使用该API之前，您需要拥有一对腾讯云账号的 SecretId 和 SecretKey 用于身份认证。在代码中，可以通过以下代码实例化一个认证对象：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">credential := common.NewCredential(<br>    <span class="hljs-string">&quot;SecretId&quot;</span>,<br>    <span class="hljs-string">&quot;SecretKey&quot;</span>,<br>)<br></code></pre></td></tr></table></figure><p>请将 “SecretId” 和 “SecretKey” 替换为您自己的账号信息。</p><h3 id="步骤3：base64编码-2"><a href="#步骤3：base64编码-2" class="headerlink" title="步骤3：base64编码"></a>步骤3：base64编码</h3><p>在使用该API之前，您需要将待识别的图片文件转换成base64格式。在示例中，通过以下代码读取本地图片文件，并进行base64编码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">fileData, err := ioutil.ReadFile(<span class="hljs-string">&quot;./images/1.jpg&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-built_in">panic</span>(err)<br>&#125;<br>imageBase64 := base64.StdEncoding.EncodeToString(fileData)<br></code></pre></td></tr></table></figure><h3 id="步骤4：调用-API-1"><a href="#步骤4：调用-API-1" class="headerlink" title="步骤4：调用 API"></a>步骤4：调用 API</h3><p>通过以下代码实例化一个client对象和一个请求对象，并将图片内容设置为请求对象的参数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go">cpf := profile.NewClientProfile()<br>cpf.HttpProfile.Endpoint = <span class="hljs-string">&quot;ocr.tencentcloudapi.com&quot;</span><br><br>client, err := ocr.NewClient(credential, <span class="hljs-string">&quot;ap-guangzhou&quot;</span>, cpf)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br>request := ocr.NewRecognizeTableOCRRequest()<br>request.ImageBase64 = common.StringPtr(imageBase64)<br><br>response, err := client.RecognizeTableOCR(request)<br><span class="hljs-keyword">if</span> _, ok := err.(*errors.TencentCloudSDKError); ok &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;An API error has returned: %s&quot;</span>, err)<br>    <span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-built_in">panic</span>(err)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="完整示例-5"><a href="#完整示例-5" class="headerlink" title="完整示例"></a>完整示例</h3><p>以下是一个完整的示例，演示了如何使用 GO 调用腾讯云的 OCR 服务来识别表格，并打印出识别结果。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/base64&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io/ioutil&quot;</span><br><br><span class="hljs-string">&quot;github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common&quot;</span><br><span class="hljs-string">&quot;github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/errors&quot;</span><br><span class="hljs-string">&quot;github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/profile&quot;</span><br>ocr <span class="hljs-string">&quot;github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/ocr/v20181119&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 读取本地图片文件</span><br>fileData, err := ioutil.ReadFile(<span class="hljs-string">&quot;./images/1.jpg&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><span class="hljs-comment">// 将图片内容进行 Base64 编码</span><br>imageBase64 := base64.StdEncoding.EncodeToString(fileData)<br><br><span class="hljs-comment">// 实例化一个认证对象，入参需要传入腾讯云账户 SecretId 和 SecretKey，此处还需注意密钥对的保密</span><br>credential := common.NewCredential(<br><span class="hljs-string">&quot;SecretId&quot;</span>,<br><span class="hljs-string">&quot;SecretKey&quot;</span>,<br>)<br><br><span class="hljs-comment">// 实例化一个client选项，可选的，没有特殊需求可以跳过</span><br>cpf := profile.NewClientProfile()<br>cpf.HttpProfile.Endpoint = <span class="hljs-string">&quot;ocr.tencentcloudapi.com&quot;</span><br><br><span class="hljs-comment">// 实例化要请求产品的client对象,clientProfile是可选的</span><br>client, err := ocr.NewClient(credential, <span class="hljs-string">&quot;ap-guangzhou&quot;</span>, cpf)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br><span class="hljs-comment">// 实例化一个请求对象,每个接口都会对应一个request对象</span><br>request := ocr.NewRecognizeTableOCRRequest()<br><br><span class="hljs-comment">// 设置要识别的图片内容</span><br>request.ImageBase64 = common.StringPtr(imageBase64)<br><br><span class="hljs-comment">// 返回的resp是一个RecognizeTableOCRResponse的实例，与请求对象对应</span><br>response, err := client.RecognizeTableOCR(request)<br><span class="hljs-keyword">if</span> _, ok := err.(*errors.TencentCloudSDKError); ok &#123;<br>fmt.Printf(<span class="hljs-string">&quot;An API error has returned: %s&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br><span class="hljs-comment">// 输出json格式的字符串回包</span><br>fmt.Printf(<span class="hljs-string">&quot;%s&quot;</span>, response.ToJsonString())<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="具体案例-5"><a href="#具体案例-5" class="headerlink" title="具体案例"></a>具体案例</h3><p><em>您可以从以下仓库中下载示例代码：<a href="https://github.com/ShengjieJin/tencentcloudOCRDemo">https://github.com/ShengjieJin/tencentcloudOCRDemo</a></em></p><p>路径：<code>/Demo/6 GO Demo</code> 中提供了可直接运行的程序。</p><ol><li>配置好相关环境后，将main.go第25、26行中的 <code>&quot;SecretId&quot;,&quot;SecretKey&quot;</code> 替换为您自己的凭证。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">credential := common.<span class="hljs-built_in">NewCredential</span>(<br><span class="hljs-string">&quot;SecretId&quot;</span>,<br><span class="hljs-string">&quot;SecretKey&quot;</span>,<br>)<br></code></pre></td></tr></table></figure><ol start="2"><li>执行以下命令运行程序：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">go run main.go<br></code></pre></td></tr></table></figure><ol start="3"><li>程序运行后，变量 <code>response</code> 中将保存 API 返回的 JSON 格式字符串。下面是打印内容的示例：</li></ol><p><img src="/2023/02/28/%E8%85%BE%E8%AE%AF%E4%BA%91OCR%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230225173413299.png" alt="image-20230225173413299"></p>]]></content>
    
    
    <categories>
      
      <category>tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
